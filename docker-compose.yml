version: '3'

services:
    swagger:
        image: swaggerapi/swagger-ui
        environment:
            SWAGGER_JSON: /schema.yml
        volumes:
            - ./schema.yml:/schema.yml
        expose:
            - 8080
        stdin_open: true
        tty: true
    certbot:
        build: ./dockerfiles/certbot
        volumes:
            - ./configs/certbot/conf:/etc/letsencrypt
            - ./configs/certbot/www:/var/www/certbot
        env_file:
            - ./dockerfiles/certbot/.envs
        stdin_open: true
        tty: true
    nginx:
        image: nginx:1.20
        ports:
        - "80:80"
        - "443:443"
        volumes:
            - ./src:/src
            - ./configs/nginx/sites-enabled:/etc/nginx/conf.d
            - ./configs/certbot/conf:/etc/letsencrypt
            - ./configs/certbot/www:/var/www/certbot
            - ./configs/nginx/extras:/etc/nginx/extras
            - ./assets:/code/assets
        depends_on:
            - backend
    redis:
        image: redis
    db:
        image: mysql:8.0.21
        stop_signal: SIGINT  # Fast shutdown.
        ports:
            - "3306:3306"
        env_file:
            - .envs/mysql.env
        volumes:
            - app_dbdata:/var/lib/mysql
        #healthcheck:
        #  test: ["CMD-SHELL", "mysqladmin ping -h localhost -P 3306 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD"]
        #  timeout: 30s
        #  interval: 5s
    backend:
        build: .
        command: >
            sh -c "./wait-for-it.sh db:3306;
                    crond -b -l 0 -L ./logcrond
                    ./manage.py migrate;
                    while :;
                    do exec ./manage.py runserver 0.0.0.0:8000;
                    done;
                    "
        stop_signal: SIGINT  # The devserver only stops on SIGINT.
        stdin_open: true
        tty: true
        volumes:
            - .:/code:cached
        ports:
            - "8000:8000"
        env_file:
            - .envs/app.env
        #depends_on:
        #  db:
        #    condition: service_healthy
        #  redis:
        #    condition: service_started
        environment:
            IN_DOCKER: 1

volumes:
    app_dbdata:
